11a12
> module Unix = Core_unix
87a89
>       let c1 = Time_stamp_counter.now () in
94a97
>       let c2 = Time_stamp_counter.now () in
103c106
<       s.M.cycles <- Int63.zero;
---
>       s.M.cycles <- (Time_stamp_counter.diff c2 c1 :> Int63.t);
181c184,205
<   List.map tests ~f:(measure run_config)
---
>   if RC.fork_each_benchmark run_config
>   then (
>     let fds = List.map tests ~f:(fun _ -> Unix.pipe ()) in
>     let () =
>       Stdlib.List.iter2
>         (fun test (_fdr, fdw) ->
>            match Caml_unix.fork () with
>            | 0 ->
>              let x = measure run_config test in
>              let open Stdlib in
>              let oc = Caml_unix.out_channel_of_descr fdw in
>              Marshal.to_channel oc x [];
>              exit 0
>            | pid -> ignore (Caml_unix.waitpid [] pid : int * Caml_unix.process_status))
>         tests
>         fds
>     in
>     List.map fds ~f:(fun (fdr, _fdw) ->
>       let open Stdlib in
>       let ic = Caml_unix.in_channel_of_descr fdr in
>       Marshal.from_channel ic))
>   else List.map tests ~f:(measure run_config)
